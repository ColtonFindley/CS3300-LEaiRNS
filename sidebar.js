const GEMINI_API_KEY = "API_KEY";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + GEMINI_API_KEY
 
let buffer = true // Disables the button until Gemini is done writing a response
 
document.getElementById("sendMessageBtn").addEventListener("click", async () => {
   
    if (!buffer) return;
    buffer = false;
 
    const message = document.getElementById("messageInput").value;
   
    // Find the active tab in the current window to get the current time
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    if (!tab) return;
 
    const url = tab.url
 
    // Send the message and the timestamp to the background script
    chrome.tabs.sendMessage(tab.id, { command: "getCurrentTime" }, (response) => {
        // Once the timestamp is retrieved, send the custom message to background.js
        const timestamp = response.timestamp;  // The timestamp returned from content.js
        chrome.runtime.sendMessage({
            type: "CUSTOM_MESSAGE",
            payload: message,
            timestamp: timestamp,
            youtube: url
        });
 
        // Display the sent message in the chatbox without showing the timestamp
        appendMessage('You', message);
 
        // Clear the text box after sending the message
        document.getElementById("messageInput").value = '';
    });
});
 
// Listen for a response from background.js and display it
chrome.runtime.onMessage.addListener((message) => {
    if (message.type === "CUSTOM_RESPONSE") {
       
        const msg = message.payload;
        const tmp = message.timestamp;
        const yt = message.youtube
 
        let tmp1 = Math.floor(tmp / 60).toString().padStart(2, '0');
        let tmp2 = (tmp % 60).toString().padStart(2, '0');
        let timestamp = tmp1 + ":" + tmp2;
 
        fetch(GEMINI_API_URL, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-Goog-Api-Key": GEMINI_API_KEY
            },
            body: JSON.stringify({
                contents: [{
                    parts: [
                        { text: "Don't mention this in your response: the following message is a question from the user who is currently watching the attached youtube video. They are currently at "
                            + timestamp + " in the video. Here is their message to respond to: " + msg},
                        {file_data: {file_uri: yt}}
                    ]
                }]
            }),
        })
        .then(response => { 
            return response.json();
        })
        .then((result) => {
            const reply = result.candidates[0].content.parts[0].text;
            appendMessage('Gemini', reply);
            buffer = true
        })
     }
});
 
// Function to append messages to the chat area
function appendMessage(sender, text) {
    const chatArea = document.getElementById("chatArea");
    const messageDiv = document.createElement("div");
    messageDiv.classList.add('message', sender.toLowerCase());
    messageDiv.textContent = `${sender}: ${text}`;
    chatArea.appendChild(messageDiv);
 
    // Scroll to the bottom of the chat area
    chatArea.scrollTop = chatArea.scrollHeight;
}
 
// Add disclaimer message when panel loads
window.addEventListener("DOMContentLoaded", () => {
    appendMessage("Disclaimer", "Responses are generated by Google's Gemini AI. There are no guarantees of the validity of the information generated by the AI. Always verify critical information independently." +
        " Validity of the information is also dependent on the content of the YouTube video.");
});
